#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.5 on Mon Sep 24 16:53:16 2012
from __future__ import division
import wx
import os
import pysam
import re

# begin wxGlade: extracode
# end wxGlade



class MainFrameMenuBar(wx.MenuBar):
    def __init__(self, *args, **kwds):
        # content of this block not found: did you rename this class?
        pass

    def __set_properties(self):
        # content of this block not found: did you rename this class?
        pass

    def __do_layout(self):
        # content of this block not found: did you rename this class?
        pass

# end of class MainFrameMenuBar
class PrimerFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PrimerFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)

        # Menu Bar
        self.MainFrame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.NewId(), "Quit", "Quit PrimerSeq", wx.ITEM_NORMAL)
        self.MainFrame_menubar.Append(wxglade_tmp_menu, "File")
        self.SetMenuBar(self.MainFrame_menubar)
        # Menu Bar end
        self.MainFrame_statusbar = self.CreateStatusBar(1, 0)
        self.primer3_notebook = wx.Notebook(self, -1, style=0)
        self.primer3_notebook_optional = wx.Panel(self.primer3_notebook, -1)
        self.primer3_notebook_required = wx.Panel(self.primer3_notebook, -1)
        self.bam_label = wx.StaticText(self.primer3_notebook_required, -1, "BAM file(s):")
        self.bam_button = wx.Button(self.primer3_notebook_required, -1, "Choose . . .")
        self.panel_2 = wx.ScrolledWindow(self.primer3_notebook_required, -1, style=wx.TAB_TRAVERSAL)
        self.bam_label_output = wx.StaticText(self.panel_2, -1, "")
        self.fasta_label = wx.StaticText(self.primer3_notebook_required, -1, "FASTA file:")
        self.fasta_button = wx.Button(self.primer3_notebook_required, -1, "Choose . . .")
        self.panel_1 = wx.ScrolledWindow(self.primer3_notebook_required, -1, style=wx.TAB_TRAVERSAL)
        self.fasta_label_output = wx.StaticText(self.panel_1, -1, "")
        self.gtf_label = wx.StaticText(self.primer3_notebook_required, -1, "GTF:")
        self.gtf_button = wx.Button(self.primer3_notebook_required, -1, "Choose . . .")
        self.panel_4 = wx.ScrolledWindow(self.primer3_notebook_required, -1, style=wx.TAB_TRAVERSAL)
        self.gtf_label_output = wx.StaticText(self.panel_4, -1, "")
        self.sizer_8_staticbox = wx.StaticBox(self.primer3_notebook_required, -1, "Load Files")
        self.coordinates_label = wx.StaticText(self, -1, "Coodinates: \n(ex. +chr1:2000-20000)")
        self.coordinates_text_input = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)
        self.run_button = wx.Button(self, -1, "Run PrimerSeq")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnOpenBamFileButton, self.bam_button)
        self.Bind(wx.EVT_BUTTON, self.OnOpenFastaFileButton, self.fasta_button)
        self.Bind(wx.EVT_BUTTON, self.OnOpenGtfFileButton, self.gtf_button)
        self.Bind(wx.EVT_BUTTON, self.OnRunPrimerSeq, self.run_button)
        # end wxGlade

        # my custom code
        self.bam = []  # no bam files loaded by default
        self.fasta = None  # no fasta file by default
        self.tabix = None  # no tabix file by default

    def __set_properties(self):
        # begin wxGlade: PrimerFrame.__set_properties
        self.SetTitle("PrimerSeq")
        self.MainFrame_statusbar.SetStatusWidths([-1])
        # statusbar fields
        MainFrame_statusbar_fields = ["MainFrame_statusbar"]
        for i in range(len(MainFrame_statusbar_fields)):
            self.MainFrame_statusbar.SetStatusText(MainFrame_statusbar_fields[i], i)
        self.bam_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.bam_label_output.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.panel_2.SetScrollRate(10, 10)
        self.fasta_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.fasta_label_output.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.panel_1.SetScrollRate(10, 10)
        self.gtf_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.gtf_label_output.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.panel_4.SetScrollRate(10, 10)
        self.coordinates_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PrimerFrame.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_8_staticbox.Lower()
        sizer_8 = wx.StaticBoxSizer(self.sizer_8_staticbox, wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(4, 3, 0, 0)
        sizer_6_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1.Add(self.bam_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.bam_button, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_4.Add(self.bam_label_output, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        self.panel_2.SetSizer(sizer_4)
        grid_sizer_1.Add(self.panel_2, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.fasta_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.fasta_button, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.fasta_label_output, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        self.panel_1.SetSizer(sizer_3)
        grid_sizer_1.Add(self.panel_1, 1, wx.EXPAND, 1)
        grid_sizer_1.Add(self.gtf_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.gtf_button, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_6_copy.Add(self.gtf_label_output, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        self.panel_4.SetSizer(sizer_6_copy)
        grid_sizer_1.Add(self.panel_4, 1, wx.EXPAND, 0)
        sizer_8.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        self.primer3_notebook_required.SetSizer(sizer_8)
        self.primer3_notebook.AddPage(self.primer3_notebook_required, "Required")
        sizer_6.Add(self.primer3_notebook, 1, wx.EXPAND, 1)
        sizer_7.Add(self.coordinates_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_7.Add(self.coordinates_text_input, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_6.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_2.Add(self.run_button, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        self.Layout()
        # end wxGlade

    def OnOpenBamFileButton(self, event):  # wxGlade: PrimerFrame.<event_handler>
        dlg = wx.FileDialog(self, message='Choose your bam files', defaultDir=os.getcwd(),
                            wildcard='BAM files (*.bam)|*.bam', style=wx.FD_MULTIPLE)  # open file dialog
        # if they press ok
        if dlg.ShowModal() == wx.ID_OK:
            filenames = dlg.GetPaths()  # get the new filenames from the dialog
            filenames_without_path = dlg.GetFilenames()  # only grab the actual filenames and none of the path information
            dlg.Destroy()  # best to do this sooner
            self.bam = []  # clear bam attribute

            # set the bam attribute
            load_progress = wx.ProgressDialog('BAM', 'Setting up BAM file list',
                                              maximum=100, parent=self, style=wx.PD_CAN_ABORT
                                              | wx.PD_APP_MODAL
                                              | wx.PD_ELAPSED_TIME)  # add progress dialog so user knows what happens
            for i, filename in enumerate(filenames):
                load_progress.Update(int(float(i) / len(filenames) * 100), 'Reading %s . . .' % filenames_without_path[i])  # Display txt to user
                samfile = pysam.Samfile(filename, 'rb')  # open bam file
                if not samfile._hasIndex():
                    load_progress.Update(int(float(i) / len(filenames) * 100), 'Indexing %s . . .' % filenames_without_path[i])  # Display txt to user
                    pysam.index(filename)  # index bam file if not alrdy
                    samfile = samfile._open(filename, 'rb')  # re-open bam file with index
                self.bam.append(samfile)  # [pysam.Samfile, pysam.Samfile, ...]
            load_progress.Update(100, 'Done.')
            self.bam_label_output.SetLabel(', '.join(filenames_without_path))
        else:
            dlg.Destroy()  # make sure to destroy if they hit cancel
        event.Skip()

    def OnEnterCoordinates(self, event):  # wxGlade: PrimerFrame.<event_handler>
        print "Event handler `OnEnterCoordinates' not implemented"
        event.Skip()

    def OnRunPrimerSeq(self, event):  # wxGlade: PrimerFrame.<event_handler>
        strandList, chrList, startList, endList = [], [], [], []  # stores all coordinate info

        # handle the coordinates in self.coordinates_text_input
        coordinates_string = self.coordinates_text_input.GetValue()  # a string
        coordinates = filter(lambda x: x != '', re.split('\s*,*\s*', coordinates_string))  # ['(strand)(chr):(start)-(end)', ...]
        coordinates = map(lambda x: x.replace('-', 'dash'), coordinates)  # command line from argparse fix
        cmd = 'primer3_core -io_version=3 < ' + outfiles_PATH + jobs_ID + '.conf' + ' > ' + outfiles_PATH + jobs_ID + '.Primer3'  # primer3 cmd
        subprocess.check_call(cmd, shell=True)
        event.Skip()

    def OnOpenFastaFileButton(self, event):  # wxGlade: PrimerFrame.<event_handler>
        dlg = wx.FileDialog(self, message='Choose your FASTA file', defaultDir=os.getcwd(),
                            wildcard='FASTA file (*.fa)|*.fa')  # open file dialog
        # if they press ok
        if dlg.ShowModal() == wx.ID_OK:
            filename = dlg.GetPath()  # get the new filenames from the dialog
            dlg.Destroy()  # best to do this sooner

            # set the fasta attribute
            load_progress = wx.ProgressDialog('FASTA: ' + filename, 'Indexing the FASTA file . . .',
                                              maximum=100, parent=self, style=wx.PD_CAN_ABORT
                                              | wx.PD_APP_MODAL
                                              | wx.PD_ELAPSED_TIME)
            load_progress.Update(0, 'Indexing the FASTA file . . .')  # Display txt to user
            pysam.faidx(filename)  # always try to regenerate fasta index (probably better way to do this)
            load_progress.Update(50, 'Loading the FASTA file')  # update after indexing
            self.fasta = pysam.Fastafile(filename)  # open fasta file
            load_progress.Update(100)  # update dialog after loading fasta
            self.fasta_label_output.SetLabel(filename.split('/')[-1])  # set label to just the filename and not the whole path
        else:
            dlg.Destroy()  # make sure to destroy if they hit cancel
        event.Skip()

    def OnOpenGtfFileButton(self, event):  # wxGlade: PrimerFrame.<event_handler>
        dlg = wx.FileDialog(self, message='Choose your GTF file', defaultDir=os.getcwd(),
                            wildcard='GTF file (*.gtf)|*.gtf|gziped GTF file (*.gtf.gz)|*.gtf.gz')  # open file dialog
        # if they press ok
        if dlg.ShowModal() == wx.ID_OK:
            filename = dlg.GetPath()  # get the new filenames from the dialog
            dlg.Destroy()  # best to do this sooner

            # set the gtf attribute
            print filename
            load_progress = wx.ProgressDialog('GTF', 'Setting up GTF file list',
                                              maximum=100, parent=self, style=wx.PD_CAN_ABORT
                                              | wx.PD_APP_MODAL
                                              | wx.PD_ELAPSED_TIME)  # add progress dialog so user knows what happens
            load_progress.Update(0, 'Indexing GTF file . . .')  # indexing gtf msg
            pysam.tabix_index(filename, force=True, seq_col=0, start_col=3, end_col=4)  # index gtf file
            load_progress.Update(50, 'Loading GTF file . . .')  # load gtf msg
            filename = filename if filename.endswith('.gz') else filename + '.gz'  # add the .gz after compression in `pysam.tabix_index` if needed
            self.tabix = pysam.Tabixfile(filename)  # get tabix file
            load_progress.Update(100, 'Done.')
            for thing in self.tabix.fetch():
                print thing
                print pysam.asGTF(thing)
                print dir(pysam.asGTF(thing))
                break

        else:
            dlg.Destroy()  # make sure to destroy if they hit cancel
        event.Skip()

# end of class PrimerFrame
class PrimerApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame_1 = PrimerFrame(None, -1, "")
        self.SetTopWindow(frame_1)
        frame_1.Show()
        return 1

# end of class PrimerApp

if __name__ == "__main__":
    PrimerSeq = PrimerApp(0)
    PrimerSeq.MainLoop()
