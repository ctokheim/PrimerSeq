#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.5 on Mon Oct 29 22:23:14 2012

# these imports are to prevent import errors when I distribute the code
import anydbm
import dbhash

# useful imports
import wx
# from wx.lib.pubsub import Publisher
from wx.lib.pubsub import setuparg1
from wx.lib.pubsub import pub
import draw
import depth_plot
import os
import subprocess
import re
import sys
from pygr.seqdb import SequenceFileDB
import sam
import gtf
import primer
import add_UCSC_gene_name as gn
import threading
import csv
import utils
import json
import webbrowser
import subprocess
import custom_thread as ct
import custom_dialog as cd

# logging imports
import traceback
import logging
import datetime

# begin wxGlade: extracode
# end wxGlade


class CustomDialog(wx.Dialog):
    def __init__(self, parent, id, title, text=''):
        wx.Dialog.__init__(self, parent, id, title, size=(300,100))

        self.parent = parent
        self.text = wx.StaticText(self, -1, text)
        self.empty_text = wx.StaticText(self, -1, '')

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.empty_text, 0, wx.ALIGN_CENTER)
        sizer.Add(self.text, 0, wx.ALIGN_CENTER)
        sizer.Add(self.empty_text, 0, wx.ALIGN_CENTER)

        self.SetSizer(sizer)
        self.Show()

    def Update(self, val, update_text=''):
        if val == 100:
            self.Destroy()
        else:
            pass

    def check_dialog(self):
        pass

class PlotDialog(wx.Dialog):
    def __init__(self, parent, id, title, output_file, text=''):
        wx.Dialog.__init__(self, parent, id, title, size=(300, 100), style=wx.DEFAULT_DIALOG_STYLE)

        self.output_file = output_file

        self.parent = parent
        self.text = wx.StaticText(self, -1, text)

        self.bigwig_label = wx.StaticText(self, -1, "BigWig(s):")
        self.choose_bigwig_button = wx.Button(self, -1, "Choose . . .")
        self.bigwig = []
        self.panel_3 = wx.Panel(self, -1)
        self.bigwig_choice_label = wx.StaticText(self, -1, "None")
        bigwig_sizer = wx.GridSizer(1, 3, 0, 0)
        bigwig_sizer.Add(self.bigwig_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        bigwig_sizer.Add(self.choose_bigwig_button, 0, wx.ALIGN_CENTER | wx.ALIGN_CENTER_VERTICAL, 0)
        bigwig_sizer.Add(self.bigwig_choice_label, 0, wx.ALIGN_LEFT | wx.ALIGN_CENTER_VERTICAL, 0)

        # read in valid primer output
        with open(self.output_file) as handle:
            self.results = filter(lambda x: len(x) > 1,  # if there is no tabs then it represents an error msg in the output
                                  csv.reader(handle, delimiter='\t'))[1:]
            select_results = [', '.join(r[:2]) for r in self.results]

        # target selection widgets
        target_sizer = wx.GridSizer(1, 2, 0, 0)
        self.target_label = wx.StaticText(self, -1, "Select Target:")
        self.target_combo_box = wx.ComboBox(self, -1, choices=select_results, style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.target_combo_box.SetMinSize((145, 27))
        target_sizer.Add(self.target_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        target_sizer.Add(self.target_combo_box, 0, wx.ALIGN_LEFT, 0)

        button_sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.plot_button = wx.Button(self, -1, 'Plot')
        self.cancel_button = wx.Button(self, -1, 'Cancel')
        button_sizer.Add(self.plot_button, 0, wx.ALIGN_RIGHT)
        button_sizer.Add(self.cancel_button, 0, wx.ALIGN_LEFT)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(bigwig_sizer, 0, wx.EXPAND, 10)
        sizer.Add(target_sizer, 0, wx.EXPAND)
        sizer.Add(button_sizer, 0, wx.ALIGN_CENTER)
        sizer.SetMinSize((300, 100))

        self.Bind(wx.EVT_BUTTON, self.choose_bigwig_event, self.choose_bigwig_button)
        self.Bind(wx.EVT_BUTTON, self.plot_button_event, self.plot_button)
        self.Bind(wx.EVT_BUTTON, self.cancel_button_event, self.cancel_button)
        self.SetSizer(sizer)
        self.Show()

        pub.subscribe(self.plot_update, "plot_update")

    def cancel_button_event(self, event):
        self.Destroy()
        event.Skip()

    def choose_bigwig_event(self, event):
        dlg = wx.FileDialog(self, message='Choose your BigWig files', defaultDir=os.getcwd(),
                            wildcard='BigWig files (*.bw)|*.bw|BigWig files (*.bigWig)|*.bigWig', style=wx.FD_MULTIPLE)  # open file dialog
        # if they press ok
        if dlg.ShowModal() == wx.ID_OK:
            filenames = dlg.GetPaths()  # get the new filenames from the dialog
            filenames_without_path = dlg.GetFilenames()  # only grab the actual filenames and none of the path information
            dlg.Destroy()  # best to do this sooner

            self.bigwig = filenames
            self.bigwig_choice_label.SetLabel(', '.join(filenames_without_path))
        else:
            dlg.Destroy()

    def plot_button_event(self, event):
        if not self.bigwig or not self.target_combo_box.GetValue():
            dlg = wx.MessageDialog(self, 'Please select a BigWig file and the target exon\nyou want to plot.', style=wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            return

        self.target_id = str(self.target_combo_box.GetValue().split(',')[0])
        self.target_of_interest = str(self.target_combo_box.GetValue().split(', ')[1])

        # get the line from the file that matches the user selection
        for row in self.results:
            if row[0] == self.target_id:
                row_of_interest = row

        # find where the plot should span
        tmp_upstream_start, tmp_upstream_end = utils.get_pos(row_of_interest[9])
        tmp_downstream_start, tmp_downstream_end = utils.get_pos(row_of_interest[11])
        start = min(tmp_upstream_start, tmp_downstream_start)
        end = max(tmp_upstream_end, tmp_downstream_end)
        chr = utils.get_chr(row_of_interest[9])
        plot_domain = utils.construct_coordinate(chr, start, end)

        self.plot_button.SetLabel('Ploting . . .')
        self.plot_button.Disable()

        # draw isoforms
        plot_thread = ct.PlotThread(target=self.generate_plots, args=(self.target_id, plot_domain, self.bigwig, self.output_file))

    def generate_plots(self, tgt_id, plt_domain, bigwig, out_file):
        # generate isoform drawing
        opts = {'json': primer.config_options['tmp'] + '/isoforms/' + tgt_id + '.json',
                'output': primer.config_options['tmp'] + '/' + 'draw/' + tgt_id + '.png',
                'scale': 1,
                'primer_file': out_file,
                'id': tgt_id}
        self.draw_isoforms(opts)

        # generate read depth plot
        opts = {'bigwig': ','.join(bigwig),
                'position': plt_domain,
                'gene': 'Not Used',
                'size': 2.,
                'step': 1,
                'output': primer.config_options['tmp'] + '/depth_plot/' + tgt_id + '.png'}
        self.depth_plot(opts)

    def draw_isoforms(self, opts):
        '''
        Draw isoforms by using draw.py
        '''
        logging.debug('Drawing isoforms %s . . .' % str(opts))
        # load json file that has information isoforms and their counts
        with open(opts['json']) as handle:
            my_json = json.load(handle)

        coord = draw.read_primer_file(self.output_file, opts['id'])
        draw.main(my_json['path'], my_json['counts'], coord, opts)
        logging.debug('Finished drawing isoforms.')

    def depth_plot(self, opts):
        '''
        Create a read depth plot by using depth_plot.py
        '''
        logging.debug('Creating read depth plot %s . . .' % str(opts))
        depth_plot.read_depth_plot(opts)
        logging.debug('Finished creating read depth plot.')

    def plot_update(self, msg):
        self.plot_button.SetLabel('Plot')
        self.plot_button.Enable()
        DisplayPlotDialog(self, -1, 'Primer Results for ' + self.target_of_interest,
                          ['tmp/depth_plot/' + self.target_id + '.png',
                           'tmp/draw/' + self.target_id + '.png'])

class SortGtfDialog(wx.Dialog):
    def __init__(self, parent, id, title):
        wx.Dialog.__init__(self, parent, id, title, size=(300, 100), style=wx.DEFAULT_DIALOG_STYLE)

        self.parent = parent

        self.gtf_label = wx.StaticText(self, -1, "GTF:")
        self.choose_gtf_button = wx.Button(self, -1, "Choose . . .")
        self.panel_3 = wx.Panel(self, -1)
        self.gtf_choice_label = wx.StaticText(self, -1, "None")
        gtf_sizer = wx.GridSizer(1, 3, 0, 0)
        gtf_sizer.Add(self.gtf_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        gtf_sizer.Add(self.choose_gtf_button, 0, wx.ALIGN_CENTER | wx.ALIGN_CENTER_VERTICAL, 0)
        gtf_sizer.Add(self.gtf_choice_label, 0, wx.ALIGN_LEFT | wx.ALIGN_CENTER_VERTICAL, 0)
        self.output_gtf_label = wx.StaticText(self, -1, "Sorted GTF:")
        self.choose_output_gtf_button = wx.Button(self, -1, "Choose . . .")
        self.panel_3 = wx.Panel(self, -1)
        self.output_gtf_choice_label = wx.StaticText(self, -1, "None")
        output_gtf_sizer = wx.GridSizer(1, 3, 0, 0)
        output_gtf_sizer.Add(self.output_gtf_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        output_gtf_sizer.Add(self.choose_output_gtf_button, 0, wx.ALIGN_CENTER | wx.ALIGN_CENTER_VERTICAL, 0)
        output_gtf_sizer.Add(self.output_gtf_choice_label, 0, wx.ALIGN_LEFT | wx.ALIGN_CENTER_VERTICAL, 0)

        button_sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.sort_button = wx.Button(self, -1, 'Sort')
        self.cancel_button = wx.Button(self, -1, 'Cancel')
        button_sizer.Add(self.sort_button, 0, wx.ALIGN_RIGHT)
        button_sizer.Add(self.cancel_button, 0, wx.ALIGN_LEFT)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(gtf_sizer, 0, wx.EXPAND, 10)
        sizer.Add(output_gtf_sizer, 0, wx.EXPAND)
        sizer.Add(button_sizer, 0, wx.ALIGN_CENTER)
        sizer.SetMinSize((300, 100))

        self.Bind(wx.EVT_BUTTON, self.choose_gtf_event, self.choose_gtf_button)
        self.Bind(wx.EVT_BUTTON, self.choose_output_gtf_event, self.choose_output_gtf_button)
        self.Bind(wx.EVT_BUTTON, self.sort_button_event, self.sort_button)
        self.Bind(wx.EVT_BUTTON, self.cancel_button_event, self.cancel_button)
        self.SetSizer(sizer)
        self.Show()

        pub.subscribe(self.sort_update, "sort_update")

    def cancel_button_event(self, event):
        self.Destroy()
        event.Skip()

    def choose_output_gtf_event(self, event):
        dlg = wx.FileDialog(self, message='Choose your GTF file to be sorted', defaultDir=os.getcwd(),
                            wildcard='GTF file (*.gtf)|*.gtf')  # open file dialog
        # if they press ok
        if dlg.ShowModal() == wx.ID_OK:
            filename = dlg.GetPath()  # get the new filenames from the dialog
            filename_without_path = dlg.GetFilename()  # only grab the actual filenames and none of the path information
            dlg.Destroy()  # best to do this sooner

            self.output_gtf = filename
            self.output_gtf_choice_label.SetLabel(filename_without_path)
        else:
            dlg.Destroy()

    def choose_gtf_event(self, event):
        dlg = wx.FileDialog(self, message='Choose your GTF file to be sorted', defaultDir=os.getcwd(),
                            wildcard='GTF file (*.gtf)|*.gtf')  # open file dialog
        # if they press ok
        if dlg.ShowModal() == wx.ID_OK:
            filename = dlg.GetPath()  # get the new filenames from the dialog
            filename_without_path = dlg.GetFilename()  # only grab the actual filenames and none of the path information
            dlg.Destroy()  # best to do this sooner

            self.gtf = filename
            self.gtf_choice_label.SetLabel(filename_without_path)
        else:
            dlg.Destroy()

    def sort_gtf(self, infile, outfile):
        try:
            gtf.sort_gtf(infile, outfile)
        except MemoryError:
            cmd = 'java -jar -Xmx2048m "bin/SortGtf.jar" "%s" "%s"' % (infile, outfile)
            subprocess.check_call(cmd, shell=True)

    def sort_button_event(self, event):
        self.sort_button.SetLabel('Sorting . . .')
        self.sort_button.Disable()

        # draw isoforms
        sort_thread = ct.UpdateThread(target=self.sort_gtf,
                                      args=(self.gtf, self.output_gtf),
                                      update='sort_update')


    def sort_update(self, msg):
        self.sort_button.SetLabel('Sort')
        self.sort_button.Enable()

class AddGeneIdsDialog(wx.Dialog):
    def __init__(self, parent, id, title):
        wx.Dialog.__init__(self, parent, id, title, size=(300, 100), style=wx.DEFAULT_DIALOG_STYLE)

        self.parent = parent

        self.gtf_label = wx.StaticText(self, -1, "GTF:")
        self.choose_gtf_button = wx.Button(self, -1, "Choose . . .")
        self.panel_3 = wx.Panel(self, -1)
        self.gtf_choice_label = wx.StaticText(self, -1, "None")
        gtf_sizer = wx.GridSizer(1, 3, 0, 0)
        gtf_sizer.Add(self.gtf_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        gtf_sizer.Add(self.choose_gtf_button, 0, wx.ALIGN_CENTER | wx.ALIGN_CENTER_VERTICAL, 0)
        gtf_sizer.Add(self.gtf_choice_label, 0, wx.ALIGN_LEFT | wx.ALIGN_CENTER_VERTICAL, 0)
        self.kgxref_label = wx.StaticText(self, -1, "kgXref:")
        self.choose_kgxref_button = wx.Button(self, -1, "Choose . . .")
        self.panel_3 = wx.Panel(self, -1)
        self.kgxref_choice_label = wx.StaticText(self, -1, "None")
        kgxref_sizer = wx.GridSizer(1, 3, 0, 0)
        kgxref_sizer.Add(self.kgxref_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        kgxref_sizer.Add(self.choose_kgxref_button, 0, wx.ALIGN_CENTER | wx.ALIGN_CENTER_VERTICAL, 0)
        kgxref_sizer.Add(self.kgxref_choice_label, 0, wx.ALIGN_LEFT | wx.ALIGN_CENTER_VERTICAL, 0)
        self.output_gtf_label = wx.StaticText(self, -1, "GTF W/ Genes:")
        self.choose_output_gtf_button = wx.Button(self, -1, "Choose . . .")
        self.panel_3 = wx.Panel(self, -1)
        self.output_gtf_choice_label = wx.StaticText(self, -1, "None")
        output_gtf_sizer = wx.GridSizer(1, 3, 0, 0)
        output_gtf_sizer.Add(self.output_gtf_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        output_gtf_sizer.Add(self.choose_output_gtf_button, 0, wx.ALIGN_CENTER | wx.ALIGN_CENTER_VERTICAL, 0)
        output_gtf_sizer.Add(self.output_gtf_choice_label, 0, wx.ALIGN_LEFT | wx.ALIGN_CENTER_VERTICAL, 0)

        button_sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.add_genes_button = wx.Button(self, -1, 'Change Gene IDs')
        self.cancel_button = wx.Button(self, -1, 'Cancel')
        button_sizer.Add(self.add_genes_button, 0, wx.ALIGN_RIGHT)
        button_sizer.Add(self.cancel_button, 0, wx.ALIGN_LEFT)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(gtf_sizer, 0, wx.EXPAND, 10)
        sizer.Add(kgxref_sizer, 0, wx.EXPAND, 10)
        sizer.Add(output_gtf_sizer, 0, wx.EXPAND)
        sizer.Add(button_sizer, 0, wx.ALIGN_CENTER)
        sizer.SetMinSize((300, 100))

        self.Bind(wx.EVT_BUTTON, self.choose_gtf_event, self.choose_gtf_button)
        self.Bind(wx.EVT_BUTTON, self.choose_kgxref_event, self.choose_kgxref_button)
        self.Bind(wx.EVT_BUTTON, self.choose_output_gtf_event, self.choose_output_gtf_button)
        self.Bind(wx.EVT_BUTTON, self.add_genes_button_event, self.add_genes_button)
        self.Bind(wx.EVT_BUTTON, self.cancel_button_event, self.cancel_button)
        self.SetSizerAndFit(sizer)
        # self.SetSizer(sizer)
        self.Show()

        pub.subscribe(self.add_gene_ids_update, "add_update")

    def cancel_button_event(self, event):
        self.Destroy()
        event.Skip()

    def choose_output_gtf_event(self, event):
        dlg = wx.FileDialog(self, message='Choose your GTF file to be sorted', defaultDir=os.getcwd(),
                            wildcard='GTF file (*.gtf)|*.gtf')  # open file dialog
        # if they press ok
        if dlg.ShowModal() == wx.ID_OK:
            filename = dlg.GetPath()  # get the new filenames from the dialog
            filename_without_path = dlg.GetFilename()  # only grab the actual filenames and none of the path information
            dlg.Destroy()  # best to do this sooner

            self.output_gtf = filename
            self.output_gtf_choice_label.SetLabel(filename_without_path)
        else:
            dlg.Destroy()

    def choose_gtf_event(self, event):
        dlg = wx.FileDialog(self, message='Choose your GTF file to be sorted', defaultDir=os.getcwd(),
                            wildcard='GTF file (*.gtf)|*.gtf')  # open file dialog
        # if they press ok
        if dlg.ShowModal() == wx.ID_OK:
            filename = dlg.GetPath()  # get the new filenames from the dialog
            filename_without_path = dlg.GetFilename()  # only grab the actual filenames and none of the path information
            dlg.Destroy()  # best to do this sooner

            self.gtf = filename
            self.gtf_choice_label.SetLabel(filename_without_path)
        else:
            dlg.Destroy()

    def choose_kgxref_event(self, event):
        dlg = wx.FileDialog(self, message='Choose kgxref txt file', defaultDir=os.getcwd(),
                            wildcard='txt file (*.txt)|*.txt')  # open file dialog
        # if they press ok
        if dlg.ShowModal() == wx.ID_OK:
            filename = dlg.GetPath()  # get the new filenames from the dialog
            filename_without_path = dlg.GetFilename()  # only grab the actual filenames and none of the path information
            dlg.Destroy()  # best to do this sooner

            self.kgxref = filename
            self.kgxref_choice_label.SetLabel(filename_without_path)
        else:
            dlg.Destroy()

    def add_genes_button_event(self, event):
        self.add_genes_button.SetLabel('Adding . . .')
        self.add_genes_button.Disable()

        opts = {'annotation': self.gtf,
                'kgxref': self.kgxref,
                'output': self.output_gtf}

        # draw isoforms
        gene_thread = ct.UpdateThread(target=gn.main,
                                      args=(opts,),
                                      update='add_update')

    def add_gene_ids_update(self, msg):
        self.add_genes_button.SetLabel('Change Gene IDs')
        self.add_genes_button.Enable()

class DisplayPlotDialog(wx.Dialog):
    def __init__(self, parent, id, title, img_files):
        # call super constructor
        wx.Dialog.__init__(self, parent, id, title, style=wx.DEFAULT_DIALOG_STYLE ^ wx.RESIZE_BORDER)

        # containers for imgs
        depth_png = wx.Image(img_files[0], wx.BITMAP_TYPE_ANY).ConvertToBitmap()
        draw_png = wx.Image(img_files[1], wx.BITMAP_TYPE_ANY).ConvertToBitmap()
        self.draw_bitmap = wx.StaticBitmap(self, -1, draw_png, (10, 5), (draw_png.GetWidth(), draw_png.GetHeight()))
        self.depth_bitmap = wx.StaticBitmap(self, -1, depth_png, (10, 5), (depth_png.GetWidth(), depth_png.GetHeight()))

        self.parent = parent

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.depth_bitmap, 0, wx.ALIGN_CENTER)
        sizer.Add(self.draw_bitmap, 0, wx.ALIGN_CENTER)

        self.SetSizerAndFit(sizer)
        self.Show()


class PrimerFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PrimerFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)

        # Menu Bar
        self.primer_frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        load_ex_id = wx.NewId()
        wxglade_tmp_menu.Append(load_ex_id, "Load Ex.", "", wx.ITEM_NORMAL)
        quit_id = wx.NewId()
        wxglade_tmp_menu.Append(quit_id, "Quit", "", wx.ITEM_NORMAL)
        self.primer_frame_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        self.primer_frame_menubar.Append(wxglade_tmp_menu, "Edit")
        primer3_id = wx.NewId()
        wxglade_tmp_menu.Append(primer3_id, "Primer3", "", wx.ITEM_NORMAL)
        sort_id = wx.NewId()
        wxglade_tmp_menu.Append(sort_id, "Sort GTF", "", wx.ITEM_NORMAL)
        add_genes_id = wx.NewId()
        wxglade_tmp_menu.Append(add_genes_id, "Add Genes", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu = wx.Menu()
        plot_id = wx.NewId()
        wxglade_tmp_menu.Append(plot_id, "Plot", "", wx.ITEM_NORMAL)
        primer3_manual_id = wx.NewId()
        wxglade_tmp_menu.Append(primer3_manual_id, "Primer3 Doc.", "", wx.ITEM_NORMAL)
        self.primer_frame_menubar.Append(wxglade_tmp_menu, "View")
        wxglade_tmp_menu = wx.Menu()
        help_id = wx.NewId()
        wxglade_tmp_menu.Append(help_id, "Help", "", wx.ITEM_NORMAL)
        about_id = wx.NewId()
        wxglade_tmp_menu.Append(about_id, "&About", "", wx.ITEM_NORMAL)
        self.primer_frame_menubar.Append(wxglade_tmp_menu, "Help")
        wxglade_tmp_menu = wx.Menu()
        self.SetMenuBar(self.primer_frame_menubar)
        # Menu Bar end
        self.primer_frame_statusbar = self.CreateStatusBar(1, 0)
        self.primer_notebook = wx.Notebook(self, -1, style=0)
        self.primer_notebook_pane_1 = wx.Panel(self.primer_notebook, -1)
        self.fasta_label = wx.StaticText(self.primer_notebook_pane_1, -1, "FASTA:")
        self.choose_fasta_button = wx.Button(self.primer_notebook_pane_1, -1, "Choose . . .")
        self.choose_fasta_button.SetToolTip(wx.ToolTip('Select your genome sequence\nin FASTA format'))
        self.panel_1 = wx.ScrolledWindow(self.primer_notebook_pane_1, -1, style=wx.TAB_TRAVERSAL)
        self.fasta_choice_label = wx.StaticText(self.panel_1, -1, "None")
        self.gtf_label = wx.StaticText(self.primer_notebook_pane_1, -1, "GTF:")
        self.choose_gtf_button = wx.Button(self.primer_notebook_pane_1, -1, "Choose . . .")
        self.choose_gtf_button.SetToolTip(wx.ToolTip('Select your gene annotation\nin a sorted GTF format'))
        self.panel_2 = wx.ScrolledWindow(self.primer_notebook_pane_1, -1, style=wx.TAB_TRAVERSAL)
        self.gtf_choice_label = wx.StaticText(self.panel_2, -1, "None")
        self.bam_label = wx.StaticText(self.primer_notebook_pane_1, -1, "SAM/BAM(s):")
        self.choose_bam_button = wx.Button(self.primer_notebook_pane_1, -1, "Choose . . .")
        self.choose_bam_button.SetToolTip(wx.ToolTip('Select one or multiple SAM or BAM file(s).\nWhen selecting, hold ctrl to select multiple'))
        self.panel_3 = wx.ScrolledWindow(self.primer_notebook_pane_1, -1, style=wx.TAB_TRAVERSAL)  # self.panel_3 = wx.Panel(self.primer_notebook_pane_1, -1)
        self.bam_choice_label = wx.StaticText(self.panel_3, -1, "None")
        self.sizer_4_staticbox = wx.StaticBox(self.primer_notebook_pane_1, -1, "Load Files")
        self.coordinates_label = wx.StaticText(self.primer_notebook_pane_1, -1, "Coordinates:")
        self.coordinates_text_field = wx.TextCtrl(self.primer_notebook_pane_1, -1, "", style=wx.TE_MULTILINE)
        self.coordinates_text_field.SetToolTip(wx.ToolTip("(strand)chr:start-end\n0-based start, 1-based end"))
        self.output_label = wx.StaticText(self.primer_notebook_pane_1, -1, "Output:")
        self.choose_output_button = wx.Button(self.primer_notebook_pane_1, -1, "Choose . . .")
        self.choose_output_button.SetToolTip(wx.ToolTip('Select the output file'))
        self.panel_4 = wx.Panel(self.primer_notebook_pane_1, -1)
        self.output_choice_label = wx.StaticText(self.panel_4, -1, "None")
        self.run_button = wx.Button(self.primer_notebook_pane_1, -1, "Run PrimerSeq")
        self.run_button.SetToolTip(wx.ToolTip('Run PrimerSeq'))
        self.primer_notebook_pane_2 = wx.Panel(self.primer_notebook, -1)
        self.psi_label = wx.StaticText(self.primer_notebook_pane_2, -1, "Minimum Flanking PSI:")
        self.psi_text_field = wx.TextCtrl(self.primer_notebook_pane_2, -1, ".95")
        self.psi_text_field.SetToolTip(wx.ToolTip("Valid: 0 < PSI <= 1"))
        # self.psi_help_info = wx.StaticText(self.primer_notebook_pane_2, -1, "0 < PSI <= 1")
        self.type_label = wx.StaticText(self.primer_notebook_pane_2, -1, "Exon Junction:")
        self.type_combo_box = wx.ComboBox(self.primer_notebook_pane_2, -1, choices=["Annotation", "RNA-Seq + Annotation"], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        # self.type_help_info = wx.StaticText(self.primer_notebook_pane_2, -1, "Novel Jcts?")
        self.gene_id_label = wx.StaticText(self.primer_notebook_pane_2, -1, "Gene ID:")
        self.gene_id_combo_box = wx.ComboBox(self.primer_notebook_pane_2, -1, choices=["Valid", "Not Valid"], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        # self.gene_id_help_info = wx.StaticText(self.primer_notebook_pane_2, -1, "In GTF?")
        self.temp_label = wx.StaticText(self.primer_notebook_pane_2, -1, "Keep Temporary:")
        self.temp_combo_box = wx.ComboBox(self.primer_notebook_pane_2, -1, choices=["No", "Yes"], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.temp_combo_box.SetToolTip(wx.ToolTip('Keep intermediate files'))
        self.read_threshold_label = wx.StaticText(self.primer_notebook_pane_2, -1, "Read Threshold:")
        self.read_threshold_text_field = wx.TextCtrl(self.primer_notebook_pane_2, -1, "5")
        self.read_threshold_text_field.SetToolTip(wx.ToolTip('Minimum number of splice junction reads to\ndeclare a novel junction from RNA-Seq'))
        self.anchor_length_label = wx.StaticText(self.primer_notebook_pane_2, -1, "Anchor Length:")
        self.anchor_length_text_field = wx.TextCtrl(self.primer_notebook_pane_2, -1, "8")
        self.anchor_length_text_field.SetToolTip(wx.ToolTip('Minimum number of bases on both side of a splice junction\nfor a read to be considered a junction read'))
        self.min_jct_count_label = wx.StaticText(self.primer_notebook_pane_2, -1, "Min. Jct Count:")
        self.min_jct_count_text_field = wx.TextCtrl(self.primer_notebook_pane_2, -1, "1")
        self.min_jct_count_text_field.SetToolTip(wx.ToolTip('The minimum number of counts to assign a junction that\nis found in the gene annotation (GTF).'))
        self.sizer_11_staticbox = wx.StaticBox(self.primer_notebook_pane_2, -1, "Advanced")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.on_help, id=help_id)  # used to specify id as -1
        self.Bind(wx.EVT_MENU, self.on_load_example, id=load_ex_id)  # used to specify id as -1
        self.Bind(wx.EVT_MENU, self.quit_event, id=quit_id)  # used to specify id as -1
        self.Bind(wx.EVT_MENU, self.plot_event, id=plot_id)
        self.Bind(wx.EVT_MENU, self.add_genes_event, id=add_genes_id)
        self.Bind(wx.EVT_MENU, self.sort_gtf_event, id=sort_id)
        self.Bind(wx.EVT_MENU, self.primer3_event, id=primer3_id)
        self.Bind(wx.EVT_MENU, self.about_event, id=about_id)
        self.Bind(wx.EVT_MENU, self.primer3_manual_event, id=primer3_manual_id)
        self.Bind(wx.EVT_BUTTON, self.choose_fasta_button_event, self.choose_fasta_button)
        self.Bind(wx.EVT_BUTTON, self.choose_gtf_button_event, self.choose_gtf_button)
        self.Bind(wx.EVT_BUTTON, self.choose_bam_button_event, self.choose_bam_button)
        self.Bind(wx.EVT_BUTTON, self.choose_output_button_event, self.choose_output_button)
        self.Bind(wx.EVT_BUTTON, self.run_button_event, self.run_button)
        # end wxGlade

        self.gtf, self.bam, self.output, self.fasta = [], [], '', None
        pub.subscribe(self.update_after_dialog, "update")

        # check if the user has java installed
        try:
            with open(os.devnull, 'wb') as f:
                subprocess.call('java', stdout=f, stderr=f)
        except (subprocess.CalledProcessError, OSError):
            dlg = wx.MessageDialog(self, 'You need java installed on your computer.\nYou can download java from:\n\nhttp://www.oracle.com/technetwork/java/javase/downloads/java-se-jre-7-download-432155.html', style=wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()

    def __set_properties(self):
        # begin wxGlade: PrimerFrame.__set_properties
        self.SetTitle("PrimerSeq")
        self.primer_frame_statusbar.SetStatusWidths([-1])
        # statusbar fields
        primer_frame_statusbar_fields = [""]  # text in status bar by default
        for i in range(len(primer_frame_statusbar_fields)):
            self.primer_frame_statusbar.SetStatusText(primer_frame_statusbar_fields[i], i)
        self.fasta_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.fasta_choice_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.panel_1.SetScrollRate(10, 10)
        self.gtf_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.gtf_choice_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.panel_2.SetScrollRate(10, 10)
        self.panel_3.SetScrollRate(10, 10)  # EDIT
        self.bam_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.bam_choice_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.coordinates_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.coordinates_text_field.SetMinSize((396, 60))
        self.output_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.output_choice_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.psi_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.psi_text_field.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        # self.psi_help_info.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.type_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.type_combo_box.SetMinSize((85, 27))
        self.type_combo_box.SetSelection(0)
        # self.type_help_info.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.gene_id_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.gene_id_combo_box.SetMinSize((85, 27))
        self.gene_id_combo_box.SetSelection(0)
        # self.gene_id_help_info.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.temp_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.temp_combo_box.SetMinSize((100, 27))
        self.temp_combo_box.SetSelection(-1)
        self.read_threshold_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.anchor_length_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.min_jct_count_label.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PrimerFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_11_staticbox.Lower()
        sizer_11 = wx.StaticBoxSizer(self.sizer_11_staticbox, wx.HORIZONTAL)
        grid_sizer_4 = wx.GridSizer(4, 2, 0, 0)
        grid_sizer_3 = wx.GridSizer(3, 2, 0, 0)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_2 = wx.GridSizer(1, 3, 0, 0)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_4_staticbox.Lower()
        sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(3, 3, 0, 0)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1.Add(self.fasta_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.choose_fasta_button, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add(self.fasta_choice_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        self.panel_1.SetSizer(sizer_5)
        grid_sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.gtf_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.choose_gtf_button, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_6.Add(self.gtf_choice_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        self.panel_2.SetSizer(sizer_6)
        grid_sizer_1.Add(self.panel_2, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.bam_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.choose_bam_button, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_7.Add(self.bam_choice_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        self.panel_3.SetSizer(sizer_7)
        grid_sizer_1.Add(self.panel_3, 1, wx.EXPAND, 0)
        sizer_4.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_8.Add(self.coordinates_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_8.Add(self.coordinates_text_field, 0, wx.EXPAND, 0)
        grid_sizer_2.Add(self.output_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.choose_output_button, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_9.Add(self.output_choice_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        self.panel_4.SetSizer(sizer_9)
        grid_sizer_2.Add(self.panel_4, 1, wx.EXPAND, 0)
        sizer_8.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_8, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_2.Add(self.run_button, 0, wx.EXPAND, 0)
        self.primer_notebook_pane_1.SetSizer(sizer_2)
        grid_sizer_3.Add(self.psi_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.psi_text_field, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        # grid_sizer_3.Add(self.psi_help_info, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.type_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.type_combo_box, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 1)
        # grid_sizer_3.Add(self.type_help_info, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.gene_id_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.gene_id_combo_box, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        # grid_sizer_3.Add(self.gene_id_help_info, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_10.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_4.Add(self.temp_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_4.Add(self.temp_combo_box, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_4.Add(self.read_threshold_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_4.Add(self.read_threshold_text_field, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_4.Add(self.anchor_length_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_4.Add(self.anchor_length_text_field, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_4.Add(self.min_jct_count_label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_4.Add(self.min_jct_count_text_field, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_11.Add(grid_sizer_4, 1, wx.EXPAND, 0)
        sizer_10.Add(sizer_11, 1, wx.EXPAND, 0)
        self.primer_notebook_pane_2.SetSizer(sizer_10)
        self.primer_notebook.AddPage(self.primer_notebook_pane_1, "Required")
        self.primer_notebook.AddPage(self.primer_notebook_pane_2, "Optional")
        sizer_1.Add(self.primer_notebook, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def on_load_example(self, event):
        self.gtf, self.bam, self.fasta = [], [], None
        self.set_fasta("example/chr18.fa", "chr18.fa", use_dlg=False)
        self.set_bam(['example/chr18_9546792_9614600.sam'], ['chr18_9546792_9614600.sam'], use_dlg=False)
        self.set_gtf('example/example.chr18.gtf', 'example.chr18.gtf', use_dlg=False)
        self.coordinates_text_field.SetValue('-chr18:9562919-9563044')

    def on_help(self, event):
        """
        Open documentation in default webbrowser
        """
        webbrowser.open('help/index.html')

    def add_genes_event(self, event):
        cd.AddGeneIdsDialog(self, -1, 'Add Valid Gene IDs')

    def sort_gtf_event(self, event):
        cd.SortGtfDialog(self, -1, 'Sort GTF')

    def primer3_event(self, event):
        '''
        Try to open primer3.cfg in every platform so the user can edit it.
        '''
        filepath = 'primer3.txt'
        if sys.platform.startswith('darwin'):
            subprocess.call(('open', filepath))
        elif os.name == 'nt':
            os.startfile(filepath)
        elif os.name == 'posix':
            subprocess.call(('xdg-open', filepath))

    def primer3_manual_event(self, event):
        '''
        Try to open primer3_manual.htm in a webbrowser.
        '''
        primer3_path = primer.config_options['primer3']
        if primer3_path == '../primer3':
            webbrowser.open('primer3/primer3_manual.htm')
        else:
            webbrowser.open(primer.config_options['primer3'] + '/primer3_manual.htm')

    def update_after_dialog(self, msg):
        '''
        Updates attributes and gui components from a started Process
        or thread. This is called by PubSub.
        '''
        try:
            self.load_progress.check_dialog()
        except:
            if msg.data[0] is None:
                self.enable_load_buttons()
            elif isinstance(msg.data[0], int):
                pass
            else:
                for obj, value in msg.data:
                    if isinstance(value, str):
                        getattr(self, obj).SetLabel(value)
                    else:
                        setattr(self, obj, value)
                self.enable_load_buttons()
            return

        if msg.data[0] is None:
            self.load_progress.Update(100)
            self.enable_load_buttons()
        elif isinstance(msg.data[0], int):
            perc, text = msg.data
            self.load_progress.Update(perc, text)
        else:
            for obj, value in msg.data:
                if isinstance(value, str):
                    getattr(self, obj).SetLabel(value)
                else:
                    setattr(self, obj, value)
            self.load_progress.Update(100)
            self.enable_load_buttons()

    def disable_load_buttons(self):
        self.choose_bam_button.Disable()
        self.choose_fasta_button.Disable()
        self.choose_gtf_button.Disable()
        self.run_button.Disable()

    def enable_load_buttons(self):
        self.choose_bam_button.Enable()
        self.choose_fasta_button.Enable()
        self.choose_gtf_button.Enable()
        self.run_button.Enable()

    def process_bam(self, fnames, fnames_without_path, anc_len):
        tmp_bam = []  # a list of sam.Sam obj to be returned
        for i, f in enumerate(fnames):
            wx.CallAfter(pub.sendMessage, "update", (int(float(i) / len(fnames) * 100), 'Reading %s . . .' % fnames_without_path[i]))
            tmp_bam.append(sam.Sam(f, anc_len))
        return tmp_bam

    def quit_event(self, event):  # wxGlade: PrimerFrame.<event_handler>
        self.Destroy()
        event.Skip()

    def choose_output_button_event(self, event):  # wxGlade: PrimerFrame.<event_handler>
        dlg = wx.FileDialog(self, message='Choose your output file', defaultDir=os.getcwd(),
                            wildcard='Text file (*.txt)|*.txt')  # open file dialog

        if dlg.ShowModal() == wx.ID_OK:
            self.set_output(dlg.GetPath(), dlg.GetFilename())
            dlg.Destroy()  # best to do this sooner
        event.Skip()

    def set_output(self, path, filename):
        """
        Set the output file location for PrimerSeq
        """
        self.output = path
        self.output_choice_label.SetLabel(filename)

    def choose_fasta_button_event(self, event):  # wxGlade: PrimerFrame.<event_handler>
        dlg = wx.FileDialog(self, message='Choose your FASTA file', defaultDir=os.getcwd(),
                            wildcard='FASTA file (*.fa)|*.fa|FASTA file(*.fasta)|*.fasta')  # open file dialog
        # if they press ok
        if dlg.ShowModal() == wx.ID_OK:
            filename = dlg.GetPath()  # get the new filenames from the dialog
            filename_without_path = dlg.GetFilename()
            dlg.Destroy()  # best to do this sooner
            self.set_fasta(filename, filename_without_path)
        else:
            dlg.Destroy()  # make sure to destroy if they hit cancel
        event.Skip()

    def set_fasta(self, filename, filename_without_path, use_dlg=True):
        try:
            # set the fasta attribute
            if use_dlg:
                self.load_progress = cd.CustomDialog(self, -1, 'FASTA', 'Loading FASTA . . .\n\nThis will take several minutes')
                self.load_progress.Update(0)
            self.disable_load_buttons()  # disable loading other files while another is running
            self.current_process = ct.RunThread(target=SequenceFileDB,
                                                args=(str(filename),),
                                                attr='fasta', label='fasta_choice_label', label_text=str(filename_without_path))
        except:
            if use_dlg:
                self.load_progress.Destroy()
            t, v, trace = sys.exc_info()
            print('ERROR! For more information read the following lines')
            print('Type: ' + str(t))
            print('Value: ' + str(v))
            print('Traceback:\n' + traceback.format_exc())

    def choose_gtf_button_event(self, event):  # wxGlade: PrimerFrame.<event_handler>
        dlg = wx.FileDialog(self, message='Choose your GTF file', defaultDir=os.getcwd(),
                            wildcard='GTF file (*.gtf)|*.gtf')  # open file dialog
        # if they press ok
        if dlg.ShowModal() == wx.ID_OK:
            filename = dlg.GetPath()  # get the new filenames from the dialog
            dlg.Destroy()  # best to do this sooner
            filename_without_path = dlg.GetFilename()  # only grab the actual filenames and none of the path information
            self.set_gtf(filename, filename_without_path)
        else:
            dlg.Destroy()  # make sure to destroy if they hit cancel
        event.Skip()

    def set_gtf(self, filename, filename_without_path, use_dlg=True):
        # set the gtf attribute
        if use_dlg:
            self.load_progress = cd.CustomDialog(self, -1, 'GTF', 'Loading GTF . . .\n\nThis will take ~1 min.')
            self.load_progress.Update(0)
        self.disable_load_buttons()
        self.current_process = ct.RunThread(target=primer.gene_annotation_reader, args=(str(filename),),
                                            attr='gtf', label='gtf_choice_label', label_text=str(filename_without_path))

    def choose_bam_button_event(self, event):  # wxGlade: PrimerFrame.<event_handler>
        dlg = wx.FileDialog(self, message='Choose your bam files', defaultDir=os.getcwd(),
                            wildcard='BAM files (*.bam)|*.bam|SAM files (*.sam)|*.sam', style=wx.FD_MULTIPLE)  # open file dialog
        # if they press ok
        if dlg.ShowModal() == wx.ID_OK:
            filenames = dlg.GetPaths()  # get the new filenames from the dialog
            filenames_without_path = dlg.GetFilenames()  # only grab the actual filenames and none of the path information
            dlg.Destroy()  # best to do this sooner

            self.set_bam(filenames, filenames_without_path)  # load bam file
        else:
            dlg.Destroy()  # make sure to destroy if they hit cancel
        event.Skip()

    def set_bam(self, filenames, filenames_without_path, use_dlg=True):
        # set the bam attribute
        self.bam = []  # clear bam attribute
        if use_dlg:
            self.load_progress = cd.CustomDialog(self, -1, 'BAM', 'Loading BAM/SAM . . .\n\nThis may take several minutes')
            self.load_progress.Update(0)
        self.disable_load_buttons()
        self.current_process = ct.RunThread(target=self.process_bam,
                                            args=(map(str, filenames), filenames_without_path, int(self.anchor_length_text_field.GetValue())),
                                            attr='bam', label='bam_choice_label', label_text=str(', '.join(filenames_without_path)))

    def run_button_event(self, event):  # wxGlade: PrimerFrame.<event_handler>
        # alert the user there is missing input
        if self.gtf == [] or self.fasta is None or self.bam == [] or self.output == '':
            dlg = wx.MessageDialog(self, 'Please fill in all of the required fields.', style=wx.OK)
            dlg.ShowModal()
            return

        strandList, chrList, startList, endList = [], [], [], []  # stores all coordinate info

        # handle the coordinates in self.coordinates_text_input
        coordinates_string = self.coordinates_text_field.GetValue()  # a string
        coordinates = map(str, filter(lambda x: x != '', re.split('\s*,*\s*', coordinates_string)))  # ['(strand)(chr):(start)-(end)', ...]

        # options for primer.py
        options = {}
        options['target'] = zip(range(1, len(coordinates) + 1), coordinates)
        options['gtf'] = self.gtf
        options['fasta'] = self.fasta
        options['rnaseq'] = self.bam
        options['psi'] = float(self.psi_text_field.GetValue())
        options['rnaseq_flag'] = False
        options['annotation_flag'] = True if str(self.type_combo_box.GetValue()) == 'Annotation' else False
        options['both_flag'] = True if str(self.type_combo_box.GetValue()) == 'RNA-Seq + Annotation' else False
        options['output'] = self.output
        options['read_threshold'] = int(self.read_threshold_text_field.GetValue())
        options['keep_temp'] = False if str(self.temp_combo_box.GetValue()) == 'No' else True
        options['big_bed'] = None
        options['no_gene_id'] = False if str(self.gene_id_combo_box.GetValue()) == 'Valid' else True
        options['min_jct_count'] = int(self.min_jct_count_text_field.GetValue())
        options['anchor_length'] = int(self.anchor_length_text_field.GetValue())
        options['job_id'] = 'jobs_id'

        self.load_progress = cd.CustomDialog(self, -1, 'Run PrimerSeq', 'Designing primers . . .\n\nThis dialog will close after it is done.')
        self.load_progress.Update(0)
        self.disable_load_buttons()
        self.current_process = ct.RunThread(target=primer.main, args=(options,))

        event.Skip()

    def plot_event(self, event):  # wxGlade: PrimerFrame.<event_handler>
        try:
            if self.output:
                cd.PlotDialog(self, -1, 'Plot Results', self.output)
            else:
                dlg = wx.MessageDialog(self, 'Please run PrimerSeq before trying to plot results.', style=wx.OK)
                dlg.ShowModal()
        except AttributeError:
            dlg = wx.MessageDialog(self, 'Please run PrimerSeq before trying to plot results.', style=wx.OK)
            dlg.ShowModal()

    def about_event(self, event):

        description = """PrimerSeq aims to design primers on flanking constitutive exons around your target position of interest.
The advantage of PrimerSeq is it handles the ambiguity of where to place primers by incorporating RNA-Seq data.
Essentially, the RNA-Seq data allows primers to be placed based on your particular cell line or experimental condition
rather than using annotations that incorporate transcripts that are not expressed for your data.

PrimerSeq redistributes primer3 which is licensed under GPLv2, the SAM-JDK which is licensed under Apache License V2.0, MIT, and the BigWig api which
is licensed under LGPL v2.1. There is no source code modification to any of the previous work."""

        licence = """PrimerSeq is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the License,
or (at your option) any later version.

PrimerSeq is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details. You should have
received a copy of the GNU General Public License along with PrimerSeq;
if not, write to the Free Software Foundation, Inc., 59 Temple Place,
Suite 330, Boston, MA  02111-1307  USA"""


        info = wx.AboutDialogInfo()

        # info.SetIcon(wx.Icon('hunter.png', wx.BITMAP_TYPE_PNG))
        info.SetName('PrimerSeq')
        info.SetVersion('1.0')
        info.SetDescription(description)
        info.SetCopyright('(C) 2012 Collin Tokheim')
        info.SetWebSite('http://primerseq.sf.net')
        info.SetLicence(licence)
        info.AddDeveloper('Collin Tokheim')
        info.AddDocWriter('Collin Tokheim')
        # info.AddArtist('The Tango crew')
        # info.AddTranslator('Jan Bodnar')

        wx.AboutBox(info)


# end of class PrimerFrame
class PrimerApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        primer_frame = PrimerFrame(None, -1, "")
        self.SetTopWindow(primer_frame)
        primer_frame.Show()
        return 1

# end of class PrimerApp

if __name__ == "__main__":
    # define logging file before using logging.debug
    if not os.path.exists(primer.config_options['log']): os.mkdir(primer.config_options['log'])  # make directory to put log files
    logging.basicConfig(level=logging.DEBUG,
                        format='%(asctime)s %(message)s',
                        filename=primer.config_options['log'] + '/log.PrimerApp.' + str(datetime.datetime.now()).replace(':', '.'),
                        filemode='w')

    # start GUI
    PrimerApp = PrimerApp(0)
    PrimerApp.MainLoop()
